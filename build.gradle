// Top-level build file where you can add configuration options common to all
// sub-projects/modules.
buildscript {
    ext {
        kotlinVersion = "1.8.21"
        coroutinesVersion = "1.7.0"
        lifecycleVersion = "2.6.1"
        navVersion = "2.5.3"
        retrofitVersion = "2.9.0"
        okhttpVersion = "4.11.0"
        appCompatVersion = "1.6.1"
        materialVersion = "1.9.0"
        coilVersion = "2.3.0"
    }
    allprojects {
        repositories {
            google()
            mavenCentral()
            maven { url = uri("https://jitpack.io") }
        }


    }

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://maven.google.com"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath 'com.google.gms:google-services:4.4.0'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.9'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.48.1'
        classpath "io.realm:realm-gradle-plugin:10.16.1"


    }
}

plugins {
    id 'com.google.devtools.ksp' version '1.8.21-1.0.11'
    id 'org.jetbrains.kotlin.android' version '1.8.21' apply false
    id "org.jetbrains.kotlin.kapt" version "1.8.21" apply false
    id 'com.google.dagger.hilt.android' version '2.48.1' apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.5.0'

}


apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.google.dagger.hilt.android'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'


repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url = 'https://jitpack.io' }
    maven {
        url = uri("https://maven.pkg.github.com/trustwallet/wallet-core")
        credentials {
            username = getGitHubUsername() as String ?: System.getenv("GITHUB_USER")
            password = getPAT() as String ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

configurations {
    freeImplementation
    quicksyImplementation
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation fileTree(include: ['*.aar'], dir: 'libs')
    implementation 'androidx.viewpager:viewpager:1.0.0'
//    implementation 'org.jetbrains:annotations:23.0.0'

    implementation 'com.github.open-keychain.open-keychain:openpgp-api:v5.7.1'
    implementation("com.github.CanHub:Android-Image-Cropper:2.0.0")
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.exifinterface:exifinterface:1.3.6'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'com.google.android.material:material:1.9.0'

    implementation "androidx.emoji2:emoji2:1.2.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.recyclerview:recyclerview:1.3.1'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    freeImplementation "androidx.emoji2:emoji2-bundled:1.2.0"

    implementation 'org.bouncycastle:bcmail-jdk15on:1.64'
    //zxing stopped supporting Java 7 so we have to stick with 3.3.3
    //https://github.com/zxing/zxing/issues/1170
    implementation 'com.google.zxing:core:3.3.3'
    implementation 'de.measite.minidns:minidns-hla:0.2.4'
    implementation 'me.leolin:ShortcutBadger:1.1.22@aar'
    implementation 'org.whispersystems:signal-protocol-java:2.6.2'
    implementation 'com.makeramen:roundedimageview:2.3.0'
    implementation "com.wefika:flowlayout:0.4.1"
    //noinspection GradleDependency
    implementation('com.github.natario1:Transcoder:v0.9.1') {
        exclude group: 'com.otaliastudios.opengl', module: 'egloo'
    }
    implementation 'com.github.natario1:Egloo:v0.4.0'

    implementation 'org.jxmpp:jxmpp-jid:1.0.3'
    implementation 'org.jxmpp:jxmpp-stringprep-libidn:1.0.3'
    implementation 'org.osmdroid:osmdroid-android:6.1.11'
    implementation 'org.hsluv:hsluv:0.2'
    implementation 'org.conscrypt:conscrypt-android:2.5.2'
    implementation 'me.drakeet.support:toastcompat:1.1.0'
    implementation "com.leinardi.android:speed-dial:3.2.0"

    //Retrofit & okHttp
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.okhttp3:okhttp:4.10.0"
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:4.10.0'
    implementation "com.squareup.okhttp3:logging-interceptor:4.10.0"
    implementation group: 'com.google.guava', name: 'guava', version: '30.1.1-android'
    quicksyImplementation 'io.michaelrocks:libphonenumber-android:8.12.49'
//     implementation 'im.conversations.webrtc:webrtc-android:104.0.0'

    /// New dependencies

//    Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"


//    LIFE-CYCLE
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"

    // country picker
    implementation 'com.hbb20:ccp:2.5.3'
    implementation 'com.intuit.sdp:sdp-android:1.1.0'

    //multidex
    implementation 'androidx.multidex:multidex:2.0.1'
    // socket
    implementation('io.socket:socket.io-client:2.1.0') {
        exclude group: 'org.json', module: 'json'
    }

    // media-soup
//   implementation 'io.github.haiyangwu:mediasoup-client:3.4.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.6'

    implementation 'com.github.bumptech.glide:glide:4.16.0'
//    kapt 'com.github.bumptech.glide:compiler:4.13.0'


    // charts
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'com.intuit.sdp:sdp-android:1.1.0'

    implementation 'org.protoojs.droid:protoo-client:4.0.3'
    implementation "androidx.preference:preference-ktx:1.2.1"

    // Jackson
    implementation "com.fasterxml.jackson.core:jackson-core:2.8.3"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.8.3"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.8.3"

    // Volley
    implementation "com.android.volley:volley:1.2.1"

//    HILT
    implementation 'com.google.dagger:hilt-android:2.48.1'
    kapt 'com.google.dagger:hilt-compiler:2.48.1'


//    PUT-NEW-DEPENDENCY-HERE
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.biometric:biometric:1.1.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'


    implementation("com.trustwallet:wallet-core:3.2.18", {
        exclude group: 'com.google.protobuf', module: '*'
    })
    implementation 'com.github.florent37:TutoShowcase:d8b91be8a2'
    implementation 'com.github.google:flexbox-layout:2.0.1'
    implementation 'com.github.salomonbrys.kotson:kotson:2.5.0'
    implementation 'com.github.mailchimp:mailchimp-sdk-android:1.0.0'

    //Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'

    implementation platform('com.walletconnect:android-bom:1.13.1')
    implementation("com.walletconnect:android-core", {
        exclude group: 'org.web3j', module: '*'
    })
    implementation("com.walletconnect:web3wallet", {
        exclude group: 'org.web3j', module: '*'
    })

    runtimeOnly 'androidx.work:work-runtime-ktx:2.8.1'


    // Bar code scanning
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
    // Keyboard visibility
    implementation 'net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:3.0.0-RC3'


    //Analytics

    implementation 'com.google.android.play:core:1.10.3'
    implementation 'com.google.firebase:firebase-analytics:21.3.0'
    implementation 'com.mixpanel.android:mixpanel-android:5.8.4'
    implementation 'com.google.firebase:firebase-crashlytics:18.4.3'
    implementation 'com.google.firebase:firebase-messaging:21.1.0'

//    Expand-able-layout
    implementation "com.github.skydoves:expandablelayout:1.0.7"
//    Arc-layout
    implementation 'com.ogaclejapan.arclayout:library:1.1.0@aar'


}
ext {
    preDexEnabled = System.getProperty("pre-dex", "true")
    abiCodes = ['armeabi-v7a': 1, 'x86': 2, 'x86_64': 3, 'arm64-v8a': 4]
}

android {
    signingConfigs {
        release {
            storeFile file('/Users/mac/Desktop/woooo_release_key')
            storePassword '12345@Az'
            keyAlias 'wooooAndroidKey'
            keyPassword '12345@Az'
        }
    }
    namespace 'eu.siacs.conversations'
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 33
        versionCode 30
        versionName "1.3.0"
        applicationId "com.wgroup.woooo_app"
        resValue "string", "applicationId", applicationId
        def appName = "Woooo"
        resValue "string", "app_name", appName
        buildConfigField "String", "APP_NAME", "\"$appName\""
        multiDexEnabled true
//        archivesBaseName = "Woooo-$versionName"

        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true

        testInstrumentationRunnerArguments clearPackageData: 'true'
        def XInfuraAPI = "XInfuraAPI"
        //Put your Infura key here, NB with over 30 - 40 users this API key will rate limit, it's only here for bootstrapping a free build
        def DEFAULT_INFURA_API_KEY = "\"85e4cb43a0634867a0da83f58de51b11\""
        def DEFAULT_OPENSEA_API_KEY = "\"...\"";
        //Put your OpenSea developer API key in here, otherwise you are reliant on the backup NFT fetch method (which usually works ok)
        def DEFAULT_POLYGONSCAN_API_KEY = "\"85e4cb43a0634867a0da83f58de51b11\"";
        //Put your Polygonscan developer API key in here to get access to Polygon/Mumbai token discovery and transactions
        def DEFUALT_WALLETCONNECT_PROJECT_ID = "\"3c23ac970b2ec1729412087b2078b511\""
        def DEFAULT_AURORA_API_KEY = "\"85e4cb43a0634867a0da83f58de51b11\"";
        //Put your Aurorascan.dev API key here - this one will rate limit as it is common

        buildConfigField 'int', 'DB_VERSION', '01'
        buildConfigField "String", XInfuraAPI, DEFAULT_INFURA_API_KEY
        buildConfigField "String", "WALLETCONNECT_PROJECT_ID", DEFUALT_WALLETCONNECT_PROJECT_ID
        buildConfigField "String", "NOTIFICATION_API_BASE_URL", NOTIFICATION_API_BASE_URL
        buildConfigField "String", "CONTRACT_OPERATOR", CONTRACT_OPERATOR


        externalNativeBuild {
            cmake {
                cFlags "-DIFKEY=" + DEFAULT_INFURA_API_KEY + ""
                cFlags "-DOSKEY=" + DEFAULT_OPENSEA_API_KEY + ""
                cFlags "-DPSKEY=" + DEFAULT_POLYGONSCAN_API_KEY + ""
                cFlags "-DASKEY=" + DEFAULT_AURORA_API_KEY + ""
                cFlags "-DWCKEY=" + DEFUALT_WALLETCONNECT_PROJECT_ID + ""
            }
            cmake {
                cFlags "-Wno-dev"
            }
        }


    }

    splits {
        abi {
            universalApk true
            enable true
        }
    }

    configurations {
        implementation.exclude group: 'com.intellij', module: 'annotations'
    }

    dataBinding {
        enabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
            kotlinOptions.jvmTarget = "17"
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    kapt { correctErrorTypes = true }


    buildFeatures {
//        compose true
        viewBinding true
        buildConfig = true

    }


//    applicationVariants.all { variant ->
//        kotlin.sourceSets {
//            getByName(variant.name) {
//                kotlin.srcDir("build/generated/ksp/${variant.name}/kotlin")
//            }
//        }
//    }

    kapt {
        correctErrorTypes true
    }

    flavorDimensions("mode", "distribution")

    productFlavors {
//
        quicksy {
            dimension "mode"
            applicationId = "im.quicksy.client"
            resValue "string", "applicationId", applicationId
            def appName = "Quicksy"
            resValue "string", "app_name", appName
            buildConfigField "String", "APP_NAME", "\"$appName\""
        }
////
        conversations {
            dimension "mode"
        }

//        playstore {
//            dimension "distribution"
//            versionNameSuffix "+playstore"
//        }
        free {
            dimension "distribution"
//            versionNameSuffix ""
        }
    }

    sourceSets {
        quicksyFree {
            java {
                srcDir 'src/quicksyFree/java'
            }
        }

        conversationsFree {
            java {
                srcDir 'src/conversationsFree/java'
            }
        }


    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
//            shrinkResources true
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    if (new File("signing.properties").exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(file("signing.properties")))

        signingConfigs {
            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keystore.alias']
                keyPassword props['keystore.password']
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    }


    subprojects {

        afterEvaluate {
            if (getPlugins().hasPlugin('android') ||
                    getPlugins().hasPlugin('android-library')) {

                configure(android.lintOptions) {
                    disable 'AndroidGradlePluginVersion', 'MissingTranslation'
                }
            }

        }
    }


    packagingOptions {
        jniLibs {
            excludes += ['solidity/*']
            useLegacyPackaging true
        }
        resources {
            excludes += ['META-INF/NOTICE', 'META-INF/LICENSE', 'META-INF/LICENSE.md', 'META-INF/NOTICE.md', 'META-INF/LICENSE-notice.md', 'solidity/ens/build/*.bin', 'solidity/ens/*.sol', 'solidity/ens/build/*.abi', 'en-mnemonic-word-list.txt', 'solidity/*']
        }
    }


    lint {
        disable 'MissingTranslation', 'InvalidPackage', 'AppCompatResource', 'ExtraTranslation'
    }

//    android.applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI))
//            if (baseAbiVersionCode != null) {
//                output.versionCodeOverride = (100 * project.android.defaultConfig.versionCode) + baseAbiVersionCode
//            } else {
//                output.versionCodeOverride = 100 * project.android.defaultConfig.versionCode
//            }
//        }
//
//    }

    ndkVersion '25.1.8937393'

}

private String getGitHubUsername() {
    project.findProperty("gpr.user")
}

private String getPAT() {
    def encodedToken = project.findProperty("gpr.key")
    def firstEncode = new String(encodedToken.decodeBase64())
    new String(firstEncode)
}